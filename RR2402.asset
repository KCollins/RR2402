asset.require("../actions")
asset.require("./actions")
local sun = asset.require("scene/solarsystem/sun/transforms")
local earthTransforms = asset.require("scene/solarsystem/planets/earth/earth")

-- Define the ship model resource
local shipModel = asset.resource({
  Name = "3DBenchy Model",
  Type = "HttpSynchronization",
  Identifier = "3dbenchy_model",
  Url = "https://github.com/CreativeTools/3DBenchy/raw/master/Single-part/3DBenchy.stl", -- Use 'raw' URL for direct file access
  Version = 1
})

-- The keyframes for the ship's trajectory
local shipKeyframes = asset.require("./RR2402_keyframes") -- Assumes RR2402_keyframes.asset defines 'keyframes'

-- Define the ship's position based on the keyframes
local shipPosition = {
  Identifier = "ShipPosition",
  Parent = earthTransforms.Earth.Identifier, -- Parent the asset to Earth
  TimeFrame = {
    Type = "TimeFrameInterval",
    Start = "2024-02-16T23:59:59.00Z",
    End = "2024-03-18T23:59:00.00Z"
  },
  Transform = {
    Translation = {
      Type = "TimelineTranslation",
      Keyframes = shipKeyframes.keyframes
    }
  },
  GUI = {
    Name = "Revelle Position",
    Path = "/Ship Tracks" -- A new path for your custom asset
  }
}

-- Define the ship model to be rendered
local shipRenderable = {
  Identifier = "ShipModel",
  Parent = shipPosition.Identifier,
  TimeFrame = {
    Type = "TimeFrameInterval",
    Start = "2024-02-16T23:59:59.00Z",
    End = "2024-03-18T23:59:00.00Z"
  },
  Transform = {
    Scale = {
      Type = "StaticScale",
      Scale = 1000.0 -- You might need to adjust this scale based on your model's size and desired visibility
    }
  },
  Renderable = {
    Type = "RenderableModel",
    GeometryFile = shipModel .. "3DBenchy.stl", -- Reference the synchronized STL model
    LightSources = {
      sun.LightSource,
      {
        Identifier = "Camera",
        Type = "CameraLightSource",
        Intensity = 0.5
      }
    }
  },
  GUI = {
    Name = "Revelle Model",
    Path = "/Ship Tracks"
  }
}

-- Define the trail for the ship's trajectory
local shipTrail = {
  Identifier = "ShipTrail",
  Parent = earthTransforms.Earth.Identifier, -- Parent the trail to Earth
  Renderable = {
    Type = "RenderableTrailTrajectory",
    Enabled = true, -- Set to true to show the trail by default
    Translation = {
      Type = "TimelineTranslation",
      Keyframes = shipKeyframes.keyframes
    },
    Color = { 1.0, 0.5, 0.0 }, -- An orange trail for visibility (RGB values 0-1)
    StartTime = "2024-02-16T23:59:59.00Z",
    EndTime = "2024-03-18T23:59:00.00Z",
    SampleInterval = 60, -- Sample every 60 seconds
    EnableFade = true -- Enable fade for the trail
  },
  GUI = {
    Name = "Revelle Trail",
    Path = "/Ship Tracks",
    Focusable = false
  }
}

asset.onInitialize(function()
  openspace.addSceneGraphNode(shipPosition)
  openspace.addSceneGraphNode(shipRenderable)
  openspace.addSceneGraphNode(shipTrail)
end)

asset.onDeinitialize(function()
  openspace.removeSceneGraphNode(shipTrail)
  openspace.removeSceneGraphNode(shipRenderable)
  openspace.removeSceneGraphNode(shipPosition)
end)

asset.export(shipPosition)
asset.export(shipRenderable)
asset.export(shipTrail)

asset.meta = {
  Name = "My Custom Ship Asset",
  Description = "A custom ship asset with a trajectory trail and 3DBenchy model on Earth.",
  Author = "Your Name", -- Feel free to change this
  URL = "http://openspaceproject.com",
  License = "MIT license"
}